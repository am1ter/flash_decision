# IMPORTANT!
# Use `--env-file` agument during build with `docker compose` to set arguments for Dockerfiles
# Example: docker compose --env-file=.env.prod --env-file=.env.secrets -f ./docker-compose.prod.yaml up -d --build

services:
  # Run container with sql database
  fd_sql_main:
    build:
      context: ./backend/
      dockerfile: Dockerfile.sql
    container_name: fd_sql_main
    restart: always
    env_file:
      - .env.prod
      - .env.secrets
    environment:
      - POSTGRES_PASSWORD=${SQL_PASS}
      - PGPORT=${SQL_PORT}
    ports:
      - ${SQL_PORT}:5432
    volumes:
      - fd_sql_main:/var/lib/postgresql/data
    profiles:
      - db
      - backend

  # Run container with database
  fd_redis_main:
    image: "redis/redis-stack:latest"
    container_name: fd_redis_main
    restart: always
    env_file:
      - .env.prod
      - .env.secrets
    environment:
      - BACKEND_HOST=fd_backend
      - REDIS_ARGS=--requirepass ${CACHE_REDIS_PASS}
    ports:
      - ${CACHE_REDIS_PORT}:6379
    profiles:
      - db
      - backend

  # Basic defention for containers with python
  # By default this container is ignored during `docker compose up` commands, because of the profile
  fd_tmpl:
    build:
      context: ./backend/
      dockerfile: Dockerfile.backend
    command: []
    env_file:
      - .env.prod
      - .env.secrets
    environment:
      - BACKEND_HOST=fd_backend
      - SQL_HOST=fd_sql_main
      - CACHE_REDIS_HOST=fd_redis_main
    profiles:
      - tmpl

  # Apply sql migrations
  fd_migrations:
    extends:
      service: fd_tmpl
    container_name: fd_migrations_prod
    command: poetry run alembic --name ${ENVIRONMENT} upgrade head
    restart: "no"
    depends_on:
      - fd_sql_main
    profiles:
      - db
      - backend

  # Run webserver with backend (API)
  fd_backend:
    extends:
      service: fd_tmpl
    container_name: fd_backend_prod
    command: poetry run app
    restart: always
    depends_on:
      fd_migrations:
        condition: service_completed_successfully
    ports:
      - ${BACKEND_PORT}:8001
    healthcheck:
      disable: ${HEALTHCHECK_DISABLE}
      test:
        [
          "CMD-SHELL",
          "curl -f ${BACKEND_PROTOCOL}://fd_backend:${BACKEND_PORT}/${BACKEND_API_PREFIX}/${HEALTHCHECK_URL}"
        ]
      interval: ${HEALTHCHECK_INTERVAL}
      timeout: 10s
      retries: 3
      start_period: 10s
    profiles:
      - backend

volumes:
  # Database data is stored in volume
  fd_sql_main:
    name: fd_sql_main
